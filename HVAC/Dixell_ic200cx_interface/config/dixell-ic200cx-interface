substitutions:
  system_name: esph-modbus-ic100cx
  sensor_template: esph_modbus_ic100cx
  friendly_name: "Dixel ic120cx modbus controller"
  log_level: DEBUG
  rx_pin: GPIO17
  tx_pin: GPIO16
  baud_rate: "9600"

esphome:
  name: ${system_name}
  friendly_name: ${friendly_name}
  build_path: /config/esphome/.build/${system_name}
  name_add_mac_suffix: true
  project:
    name: nivanov0.dixell-ic100cx-controller
    version: "0.1"
  on_boot:
    priority: 800
    then:
      lambda: |-
        if(id(heating_on).state) {
          id(tp_tgt_tmp).publish_state(id(tgt_ht_tmp).state);
        } else if(id(heating_on).state) {
          id(tp_tgt_tmp).publish_state(id(tgt_ht_tmp).state);
        } else {
          id(tp_tgt_tmp).publish_state (-1);
        }
      
esp32:
  board: esp32dev
  framework:
    type: esp-idf

# Enable logging
logger:
  level: ${log_level}

# Enable Home Assistant API
api:
  
ota: 
  
dashboard_import:
  package_import_url: github://wildsystems-private-team/esphome_config/dixell_ic200cx_interface.yaml@main
  import_full_config: false # or true

wifi:
  ap:
  use_address: 192.168.11.100
    
captive_portal:

esp32_improv:
  authorizer: false

improv_serial:

button:
  - platform: factory_reset
    name: Restart with Factory Default Settings

web_server:
  local: true

uart:
  id: mod_bus
  tx_pin: ${tx_pin}
  rx_pin: ${rx_pin}
  baud_rate: ${baud_rate}
  stop_bits: 1

modbus:
  id: modbus1

modbus_controller:
  id: ic100cx
  address: 0x1
  modbus_id: modbus1
  setup_priority: -10

sensor:
  - platform: modbus_controller
    modbus_controller_id: ic100cx
    name: "Target cooling temperature"
    id: tgt_cl_tmp
    register_type: holding
    address: 1148
    unit_of_measurement: "°C"
    filters: 
      multiply: 0.1
    internal: true 
  
  - platform: modbus_controller
    modbus_controller_id: ic100cx
    name: "Target heating temperature"
    id: tgt_ht_tmp
    register_type: holding
    address: 1145
    unit_of_measurement: "°C"
    filters: 
      multiply: 0.1
    internal: true 

  - platform: modbus_controller
    modbus_controller_id: ic100cx
    name: "Current underfloor exit temperature"
    id: cr_uf_ex_tmp
    register_type: holding
    address: 256
    unit_of_measurement: "°C"
    filters: 
      multiply: 0.1
    internal: true

  - platform: modbus_controller
    modbus_controller_id: ic100cx
    name: "Current underfloor in temperature"
    id: cr_uf_in_tmp
    register_type: holding
    address: 258
    unit_of_measurement: "°C"
    filters: 
      multiply: 0.1 

  - platform: modbus_controller
    modbus_controller_id: ic100cx
    name: "Current weel in temperature"
    id: cr_wl_in_tmp
    register_type: holding
    address: 260
    unit_of_measurement: "°C"
    filters: 
      multiply: 0.1

  - platform: modbus_controller
    modbus_controller_id: ic100cx
    name: "Current weel exit temperature"
    id: cr_wl_out_tmp
    register_type: holding
    address: 262
    unit_of_measurement: "°C"
    filters: 
      multiply: 0.1

binary_sensor:
  - platform: modbus_controller
    modbus_controller_id: ic100cx
    name: Remote off status
    id: remote_off_status
    register_type: holding
    address: 1282
    bitmask: 0x4
    internal: true 

  - platform: modbus_controller
    modbus_controller_id: ic100cx
    name: Heating mode
    id: heating_on
    register_type: holding
    address: 1282
    bitmask: 0x6
    internal: true 

  - platform: modbus_controller
    modbus_controller_id: ic100cx
    name: Cooling mode
    id: cooling_on
    register_type: holding
    address: 1282
    bitmask: 0x7
    internal: true 

output:
  - platform: modbus_controller
    modbus_controller_id: ic100cx
    id: register_1280
    address: 1280
    value_type: U_WORD
    write_lambda: |-
          ESP_LOGD("main","register_1280: Modbus Output incoming value = %f",x);
          uint16_t b_capacity = x ;
          payload.push_back(b_capacity);
          return 1 ;

  - platform: modbus_controller
    modbus_controller_id: ic100cx
    id: register_1282
    address: 1282
    value_type: U_WORD
    write_lambda: |-
          double b_capacity = x ;
          uint16_t retval = 0;
          ESP_LOGD("main","register_1282: Modbus Output incoming value = %f, retval = %d",x, retval);
          if (x == (float)0.1 ) {
            ESP_LOGD("main", "register_1282: Heating, sending 32896 as value");
            retval = 32896;
          }
          if (x == (float)0.2) {
            ESP_LOGD("main", "register_1282: Cooling, sending 16448 as value");
            retval = 16448;
          }
          ESP_LOGD("main", "register_1282: exit function, return value is %d", retval);
          return retval;
          
select:
  - platform: template
    name: TP mode
    id: tp_mode
    optimistic: true
    options:
      - "StandBy"
      - "Heating"
      - "Cooling"
    on_value:
      then:
        - if:
            condition:
              lambda: |-
                return (id(tp_mode).active_index() == 0);
            then:
            - output.set_level:
                id: register_1280
                level: 1
        - if:
            condition:
              lambda: |-
                return (id(tp_mode).active_index() == 1);
            then:
            - output.set_level:
                id: register_1282
                level: 0.1
        - if:
            condition:
              lambda: |-
                return (id(tp_mode).active_index() == 2);
            then:
            - output.set_level:
                id: register_1282
                level: 0.2

number:
  - platform: template
    name: "Target temperature"
    id: tp_tgt_tmp
    optimistic: True
    min_value: 17
    max_value: 50
    step: 0.1
          
